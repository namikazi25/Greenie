import google.generativeai as genai
from typing import Dict, Any
import os
from loguru import logger
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure Google Generative AI
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

class EvaluatorAgent:
    """Agent responsible for evaluating and refining the responses generated by the executor."""
    
    def __init__(self):
        """Initialize the evaluator agent with the Gemini model."""
        try:
            # Initialize the Gemini model
            self.model = genai.GenerativeModel('gemini-1.5-flash')
            logger.info("EvaluatorAgent initialized successfully")
        except Exception as e:
            logger.error(f"Error initializing EvaluatorAgent: {str(e)}")
            raise
    
    def evaluate_response(self, response: str, original_query: str) -> str:
        """Evaluate and refine the response generated by the executor.
        
        Args:
            response: The response generated by the executor
            original_query: The original user query
            
        Returns:
            The refined response
        """
        try:
            # Prepare the prompt for the model
            prompt = f"""You are an ecological assistant. Evaluate and refine the following response to ensure it is:
            
            1. Accurate and scientifically sound
            2. Directly addresses the user's query
            3. Helpful and actionable
            4. Concise but comprehensive
            5. Written in a friendly, conversational tone
            
            Original User Query: {original_query}
            
            Response to Evaluate:
            {response}
            
            Provide a refined version of this response that maintains all correct information while improving any issues.
            """
            
            # Generate content
            result = self.model.generate_content(prompt)
            
            # Extract the refined response
            refined_response = result.text
            
            return refined_response
            
        except Exception as e:
            logger.error(f"Error evaluating response: {str(e)}")
            # Return the original response in case of error
            return response